I"|$<h2 id="1-2020-04-06-网易2020校招笔试--运维工程师正式批">1. 2020-04-06 网易2020校招笔试- 运维工程师（正式批）</h2>

<ul>
  <li><a href="https://www.nowcoder.com/test/question/analytic?tid=32335143">网易2020校招笔试- 运维工程师（正式批）</a></li>
</ul>

<h2 id="11-ip数据报的分片">1.1 IP数据报的分片</h2>

<ul>
  <li>
    <p><a href="https://www.cnblogs.com/qiaoyanlin/p/9356119.html">IP分片与重组详解</a></p>
  </li>
  <li>分片在源主机和中间路由器都有可能产生，片到达目的主机后再进行重新组装</li>
  <li>在TCP/IP分层中，数据链路层用MTU来限制所能传输的数据包大小。MTU是指一次传送的数据最大长度，不包括数据链路层数据帧的帧头。当发送的<a href="https://www.baidu.com/s?wd=IP数据报&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">IP数据报</a>的大小超过了MTU时，IP层就需要对数据进行分片，否则数据将无法发送成功。</li>
  <li>IP分片发生在IP层，不仅源端主机会进行分片，中间的路由器也有可能分片，因为不同网络的MTU是不一样的。如果传输路径上的某个网络的MTU比源端网络的MTU要小，路由器就可能对<a href="https://www.baidu.com/s?wd=IP数据报&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">IP数据报</a>再次进行分片。而分片数据的重组只会发生在目的端的IP层。</li>
  <li>IP层是没有超时重传机制的。如果IP层对一个数据包进行了分片，只要有一个分片丢失了，只能依赖于传输层进行重传，结果是所有的分片都要重传一遍，这个代价有点大。由此可见，IP分片会大大降低传输层传送数据的成功率，所以要避免IP分片。</li>
</ul>

<h2 id="12-子网掩码问题">1.2 子网掩码问题</h2>

<p>某高校计算机学院要新建3个实验室,每个实验室有25台主机,已申请了一个C类地址192.168.10.0,该C类地址的子网掩码为（<strong>255.255.255.224</strong>）</p>

<ul>
  <li>解析: 因为有3个实验室，就需要3个网段，2^2=4，所以最少需要从地址位借2位，也可以借3位，借4位等等；但由于每个实验室有25台主机，2^4-2=14，2^5-2=30，所以最少需要5位主机位，综合起来，就只能从地址借2-3位了，借2位的话，子网掩码是255.255.255.192，借3位的话，子网掩码是255.255.255.224</li>
  <li>Python 使用_init_()作为构造方法
    <ul>
      <li>在继承中基类的构造方法不会被自动调用，需要在派生类的构造方法中显式调用</li>
    </ul>
  </li>
  <li>init.d是linux7.0之前首先启动的进程，在rhel7.0之后的版本首先启动的是systemd。</li>
</ul>

<h2 id="13-umask-022touch-a-等价于-touch-a-chmod-644">1.3 (umask 022;touch a) 等价于 （touch a; chmod 644）</h2>

<ul>
  <li>解析:umask表示反码；因该时默认权限值减去022，因为创建目录时默认最高值为7，创建文件时默认最高值为6，因此最终实际值为666-022=644(rw-r-r)</li>
</ul>

<h2 id="14-常用的负载均衡有哪些">1.4 常用的负载均衡有哪些</h2>

<h2 id="2-2020-04-07-网易2020校招笔试--c-开发工程师正式批提前批">2. 2020-04-07 网易2020校招笔试- C 开发工程师（正式批/提前批）</h2>

<h2 id="21-在linux-中设文件f1-的当前引用计数为1先建立f1-的符号链接文件f2再建立f1-的硬链接文件-f3则此时文件f1f2-和f3-的引用计数值分别是212-">2.1 在linux 中，设文件F1 的当前引用计数为1，先建立F1 的符号链接文件F2，再建立F1 的硬链接文件 F3，则此时文件F1、F2 和F3 的引用计数值分别是（2,1,2） 。</h2>

<ul>
  <li><a href="https://www.nowcoder.com/questionTerminal/7a63b184d7d74ebebcff64ce929776e8?orderByHotValue=1&amp;page=1&amp;onlyReference=false">题目链接</a></li>
  <li>解析:
    <ul>
      <li><a href="https://www.nowcoder.com/questionTerminal/7a63b184d7d74ebebcff64ce929776e8?orderByHotValue=1&amp;page=1&amp;onlyReference=false">答案</a></li>
      <li>F1是某文件的文件名，F2、F3都是该文件的别名，他们都对应唯一个物理空间，系统中还维护了一个数据结构（UNIX为inode），其中有一数据项为count记录共享该文件的目录数，建立文件时count=1，</li>
      <li>每建立一个硬链接count++，建立软链接count值不变，</li>
      <li>删除F1前count=2，删除F1后，count- -，</li>
      <li>虽然文件主删除了指向该物理文件的链接，但仍有一个硬链接（F3的链接）指向该文件物理空间，此时count=1，</li>
      <li>软链接的count值也就是这个count值，因此也是1。直到count=0时，系统才释放该文件的物理空间。</li>
      <li>(就是：软连接不变，硬链接加1，删除时软硬都减1，当count=0时，文件才真正被删除)</li>
      <li>软连接是纯粹的快捷方式，它是一个简单文件，指向源文件。源文件删除，软连接错误。</li>
      <li>可以使用<code class="language-plaintext highlighter-rouge">stat</code>查看文件详细信息</li>
    </ul>
  </li>
</ul>

<h2 id="22-一棵二叉树有8个度为2的节点5个度为1的节点那么度为0的节点个数为9">2.2 一棵二叉树有8个度为2的节点，5个度为1的节点，那么度为0的节点个数为(9)?</h2>

<ul>
  <li>
    <p><a href="https://www.nowcoder.com/test/question/done?tid=32358339&amp;qid=800691#summary">链接</a></p>
  </li>
  <li>
    <p>解析: 任一棵树中，结点总数=度数+1</p>

    <p>n0+5+8=（n0<em>0+1</em>5+8*2）+1</p>

    <p>n0=9</p>
  </li>
</ul>

<h2 id="23-电子邮件系统中用户代理把邮件发往发送发邮件服务器发送方邮件服务器把邮件发往接收方邮件服务器以及用户使用用户代理从接收方邮件服务器上读取邮件时使用的协议可能是以下的smtpsmtpimap情形">2.3 电子邮件系统中，用户代理把邮件发往发送发邮件服务器、发送方邮件服务器把邮件发往接收方邮件服务器以及用户使用用户代理从接收方邮件服务器上读取邮件时，使用的协议可能是以下的（SMTP、SMTP、IMAP）情形</h2>

<ul>
  <li><a href="https://www.nowcoder.com/test/question/done?tid=32358339&amp;qid=800673#summary">链接</a></li>
  <li>解析：
    <ul>
      <li>SMTP：发件人用户代理 —-发送邮件—&gt; 发送方邮件服务器；
        <ul>
          <li>发送方邮件服务器 —-发送邮件—&gt; 接收方邮件服务器</li>
        </ul>
      </li>
      <li>POP3/IMAP：接受方邮件服务器—-读取邮件—&gt; 收件人用户代理</li>
    </ul>
  </li>
</ul>

<h2 id="24-有abcd-4个类运行下面的程序abcd-4个类的构造函数调用顺序是b-d-a-c">2.4 有A、B、C、D 4个类，运行下面的程序，A、B、C、D 4个类的构造函数调用顺序是（B-&gt;D-&gt;A-&gt;C）</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">B</span> <span class="n">b</span><span class="p">;</span>  
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>  
<span class="p">{</span>  
    <span class="n">D</span> <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="n">D</span><span class="p">();</span>  
    <span class="n">A</span> <span class="n">a</span><span class="p">;</span>  
    <span class="k">static</span> <span class="n">C</span> <span class="n">c</span><span class="p">;</span>  
    <span class="k">delete</span> <span class="n">d</span><span class="p">;</span>  
  
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>  
<span class="p">}</span>  
</code></pre></div></div>

<ul>
  <li><a href="https://www.nowcoder.com/test/question/done?tid=32358339&amp;qid=800694#summary">链接</a></li>
  <li>解析:静态局部变量初始化是在第一次调用函数的时候初始化，全局变量是在main之前</li>
</ul>

<h2 id="25-inline-函数的作用">2.5 inline 函数的作用</h2>

<ul>
  <li>场景：当频繁调用小函数时，为了节省函数调用的开销，可以用内联函数</li>
  <li>注意：inline修饰函数的时候要加上函数体，不然没有用。</li>
  <li>优点：
    <ul>
      <li>执行的速度快</li>
      <li>调用时候会检查参数类型，比较安全</li>
      <li>可以用来修饰保护成员和私有成员</li>
      <li>（类中定义的函数不管加不加inline都会是内联函数）</li>
    </ul>
  </li>
  <li>缺点：
    <ul>
      <li>以函数复制为代价，如果过多使用，会消耗内存</li>
      <li>如果函数体内有循环，那么执行函数代码的时间比调用要开销大</li>
      <li>是否内联，程序员不可控。inline只是对编译器的建议，是否内联取决于编译器。</li>
    </ul>
  </li>
  <li>注意:inline是在编译器将函数类容替换到函数调用处，是静态编译的。而虚函数是动态调用的，在编译器并不知道需要调用的是父类还是子类的虚函数，所以不能够inline声明展开，所以编译器会忽略.因此inline不能修饰虚函数</li>
</ul>
:ET