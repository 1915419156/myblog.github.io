I"к<h1 id="4月15华为笔试笔记">4月15华为笔试笔记</h1>

<h1 id="1-明日之星选举投票">1. 明日之星选举投票</h1>

<p><img src="https://wangpengcheng.github.io/img/huwei-2020-04-15-01.jpg" alt="华为笔试题1" /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
主要思路:
使用uordered_map统计，并使用vector存储相同数量的名字；
最后进行排序即可
注意输入的格式错误
Tom,Lily,Tom,Lucy,Lucy,Jack,Tomy,Tomy,To,To

*/</span>


<span class="cp">#include &lt;cmath&gt;
#include &lt;cctype&gt;
#include &lt;cstring&gt;
#include &lt;sstream&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;vector&gt;
#include &lt;stack&gt;
#include &lt;queue&gt;
#include &lt;unordered_map&gt;
#include &lt;unordered_set&gt;
#include &lt;algorithm&gt;
#include &lt;thread&gt;
#include &lt;mutex&gt;
#include &lt;condition_variable&gt;
#include &lt;future&gt;
#include &lt;cstdint&gt;
#include &lt;climits&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">//关闭流输出</span>
<span class="k">static</span> <span class="k">auto</span> <span class="n">static_lambda</span> <span class="o">=</span> <span class="p">[]()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}();</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
<span class="nl">public:</span>
      <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">GetMaxName</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">names</span><span class="p">){</span>
          <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
          <span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">name_count</span><span class="p">;</span>
          <span class="c1">//统计数目</span>
          <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">names</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="o">++</span><span class="n">i</span><span class="p">){</span>
              <span class="k">if</span><span class="p">(</span><span class="n">name_count</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">names</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">))</span><span class="o">==</span><span class="n">name_count</span><span class="p">.</span><span class="n">end</span><span class="p">()){</span>
                  <span class="n">name_count</span><span class="p">[</span><span class="n">names</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
              <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                  <span class="o">++</span><span class="n">name_count</span><span class="p">[</span><span class="n">names</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)];</span>
              <span class="p">}</span>
          <span class="p">}</span>
          <span class="kt">int</span> <span class="n">max_count</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
          <span class="k">for</span><span class="p">(</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span><span class="o">=</span><span class="n">name_count</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span><span class="n">it</span><span class="o">!=</span><span class="n">name_count</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="o">++</span><span class="n">it</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="o">==</span><span class="n">max_count</span><span class="p">){</span>
                <span class="n">string</span> <span class="n">temp_string</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">);</span>
                <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp_string</span><span class="p">);</span>
            <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="o">&gt;</span><span class="n">max_count</span><span class="p">){</span>
                <span class="n">string</span> <span class="n">temp_string</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">);</span>
                <span class="n">max_count</span><span class="o">=</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
                <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">res</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
                    <span class="n">res</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp_string</span><span class="p">);</span>
            <span class="p">}</span>
          <span class="p">}</span>
          
          <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
       <span class="p">}</span>
<span class="p">};</span>

<span class="kt">bool</span> <span class="nf">CheckName</span><span class="p">(</span><span class="n">string</span> <span class="n">temp_str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">temp_str</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span> <span class="c1">//检查是否为空串</span>
        <span class="c1">//检查第一个字母是否正确</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">temp_str</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;=</span><span class="sc">'Z'</span><span class="o">&amp;&amp;</span><span class="n">temp_str</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&gt;=</span><span class="sc">'A'</span><span class="p">)){</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
                <span class="c1">//检查是否正确</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">temp_str</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="k">if</span><span class="p">((</span><span class="n">temp_str</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;=</span><span class="sc">'z'</span><span class="o">&amp;&amp;</span><span class="n">temp_str</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&gt;=</span><span class="sc">'a'</span><span class="p">)){</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[]){</span>
    <span class="n">Solution</span> <span class="n">a</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">org_str</span><span class="p">;</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">org_str</span><span class="p">;</span>
    <span class="c1">//处理输入和输出，生成对应的名字序列</span>
    <span class="kt">int</span> <span class="n">left</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">right</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">is_input_error</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">names</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(;</span><span class="n">right</span><span class="o">&lt;</span><span class="n">org_str</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="o">++</span><span class="n">right</span><span class="p">){</span>
        <span class="c1">//检查是否为分割符</span>
        <span class="k">if</span><span class="p">(</span><span class="n">org_str</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">right</span><span class="p">)</span><span class="o">==</span><span class="sc">','</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">string</span> <span class="n">temp_str</span><span class="o">=</span><span class="n">org_str</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">left</span><span class="p">,</span><span class="n">right</span><span class="o">-</span><span class="n">left</span><span class="p">);</span>
            <span class="c1">//cout&lt;&lt;temp_str&lt;&lt;endl;</span>
            <span class="c1">//非法输入</span>
            <span class="k">if</span><span class="p">(</span><span class="n">CheckName</span><span class="p">(</span><span class="n">temp_str</span><span class="p">)){</span>
                <span class="n">names</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp_str</span><span class="p">);</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">is_input_error</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">//在这里跳过‘,’</span>
            <span class="n">left</span><span class="o">=</span><span class="n">right</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">//获取最后的名字</span>
    <span class="k">if</span><span class="p">(</span><span class="n">right</span><span class="o">&gt;</span><span class="n">left</span><span class="p">){</span>
        <span class="n">string</span> <span class="n">temp_str</span><span class="o">=</span><span class="n">org_str</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">left</span><span class="p">,</span><span class="n">org_str</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="n">left</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">CheckName</span><span class="p">(</span><span class="n">temp_str</span><span class="p">)){</span>
            <span class="n">names</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp_str</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="n">is_input_error</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="c1">//    for(auto temp:names){</span>
 <span class="c1">//       cout&lt;&lt;temp&lt;&lt;endl;</span>
 <span class="c1">//   }</span>
    <span class="k">if</span><span class="p">(</span><span class="n">is_input_error</span><span class="o">||</span><span class="n">names</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"error.0001"</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">auto</span> <span class="n">res</span><span class="o">=</span><span class="n">a</span><span class="p">.</span><span class="n">GetMaxName</span><span class="p">(</span><span class="n">names</span><span class="p">);</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">res</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">res</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="2-输入-关键字-匹配字符串">2. 输入 关键字 匹配字符串</h2>

<p>输出：匹配值</p>

<p>XXXX XXXX［key=0x12，mask=0xf0，val=0x55］</p>

<p>空格前XXXX是关键字，空格后是关键字加［］以及里面的一些匹配值。规则1中括号前的关键字（也就是字符串中的关键字）要与给出的关键字一致，字母大小也要一样，规则2 “=”后面的匹配值必须是是16进制的数</p>

<p>如果关键字不匹配，也就是字符串中的关键字和给出的不一致，匹配失败，输出FAIL</p>

<p>例子：输入</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">read read</span>［key<span class="o">=</span>0x12，mask<span class="o">=</span>0xf0，val<span class="o">=</span>0x55］read_wo［key<span class="o">=</span>0x15，mask<span class="o">=</span>0xf0，val<span class="o">=</span>0x23］read［key<span class="o">=</span>0x92，mask<span class="o">=</span>0xf0，val<span class="o">=</span>0x51］
</code></pre></div></div>
<p>注意：除了关键字read（第一个read）外，没有空格，那个看上去有空格是因为中括号的原因。</p>

<p>输出：</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x12 0xf0 0x55

0x92 0xf0 0x51
</code></pre></div></div>
<p>字符串匹配，c++没有字符串分割函数写起来真的有点操蛋，几个规则要读懂，但是最后总算AC了。代码相当丑陋。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
作者：求份offer压压惊
链接：https://www.nowcoder.com/discuss/409150?type=0&amp;order=0&amp;pos=37&amp;page=1&amp;channel=-1
来源：牛客网
*/</span>
<span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">string</span> <span class="n">keyword</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">inform</span><span class="p">;</span>
    <span class="c1">//获取关键字和inform字符串</span>
    <span class="k">while</span><span class="p">(</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">keyword</span> <span class="o">&gt;&gt;</span> <span class="n">inform</span><span class="p">){</span>
        <span class="c1">//元素集合字符串</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">items</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">pre</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="c1">//将元素添加到items中</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">inform</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">inform</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">']'</span><span class="p">){</span>
                <span class="n">items</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">inform</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">pre</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="n">pre</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
                <span class="n">pre</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"FAIL"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">addr</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">mask</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">val</span><span class="p">;</span>
        <span class="c1">//遍历查找关键字符串的值</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">items</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">find</span><span class="p">(</span><span class="s">"addr="</span><span class="p">)</span> <span class="o">!=</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">npos</span><span class="p">){</span>
                <span class="c1">//获取值开始的坐标</span>
                <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">find</span><span class="p">(</span><span class="s">"addr="</span><span class="p">)</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
                <span class="c1">//检查是否为16进制</span>
                <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'0'</span><span class="p">)</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="c1">//获取addr子字符串</span>
                <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'x'</span> <span class="o">||</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'X'</span><span class="p">){</span>
                    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
                    <span class="k">for</span><span class="p">(;</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">','</span><span class="p">;</span> <span class="n">cnt</span><span class="o">++</span><span class="p">);</span>
                    <span class="n">addr</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">substr</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">cnt</span><span class="o">-</span><span class="n">start</span><span class="p">));</span>
                <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="c1">//查找mask</span>
            <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">find</span><span class="p">(</span><span class="s">"mask="</span><span class="p">)</span> <span class="o">!=</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">npos</span><span class="p">){</span>
                <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">find</span><span class="p">(</span><span class="s">"mask="</span><span class="p">)</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'0'</span><span class="p">)</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'x'</span> <span class="o">||</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'X'</span><span class="p">){</span>
                    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
                    <span class="k">for</span><span class="p">(;</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">','</span><span class="p">;</span> <span class="n">cnt</span><span class="o">++</span><span class="p">);</span>
                    <span class="n">mask</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">substr</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">cnt</span><span class="o">-</span><span class="n">start</span><span class="p">));</span>
                <span class="p">}</span> <span class="k">else</span>
                    <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="c1">//查找val</span>
            <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">find</span><span class="p">(</span><span class="s">"val="</span><span class="p">)</span> <span class="o">!=</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">npos</span><span class="p">){</span>
                <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">find</span><span class="p">(</span><span class="s">"val="</span><span class="p">)</span> <span class="o">+</span> <span class="mi">4</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'0'</span><span class="p">)</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'x'</span> <span class="o">||</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'X'</span><span class="p">){</span>
                    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
                    <span class="k">for</span><span class="p">(;</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">cnt</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">']'</span><span class="p">;</span> <span class="n">cnt</span><span class="o">++</span><span class="p">);</span>
                    <span class="n">val</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">substr</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">cnt</span><span class="o">-</span><span class="n">start</span><span class="p">));</span>
                <span class="p">}</span> <span class="k">else</span>
                    <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="c1">//遍历字符串查找第一个name,即匹配的名称</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'['</span><span class="p">){</span>
                    <span class="n">name</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">k</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kt">bool</span> <span class="n">has</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="c1">//检查keywor是否在name集合中，在就输出集合对应的值。</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">name</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">m</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">name</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">==</span> <span class="n">keyword</span><span class="p">){</span>
                <span class="n">has</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">addr</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">mask</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">val</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">has</span> <span class="o">==</span> <span class="nb">false</span><span class="p">){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"FAIL"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="3-栈的内存空间的调用">3. 栈的内存空间的调用</h2>

<p>一个树到顶到叶子结点的距离，DFS，输入不知道说这个结点没有栈空间，不知道位置是有数字还是没有数字。最后70%难顶。</p>

<p><img src="https://wangpengcheng.github.io/img/huwei-2020-04-15-03.jpg" alt="" /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
作者：QK康哥在此
链接：https://www.nowcoder.com/discuss/409137
来源：牛客网

*/</span>

<span class="cp">#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;map&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">R</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">NA</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="c1">//全局变量，记录最大值</span>
<span class="kt">int</span> <span class="n">max_le</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="c1">//记录调用函数队列</span>
<span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">mp</span><span class="p">;</span>
<span class="c1">//记录函数和栈空间大小</span>
<span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">mp1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">vis</span><span class="p">,</span><span class="kt">int</span> <span class="n">le</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//如果没有子函数调用</span>
    <span class="k">if</span><span class="p">(</span><span class="n">mp</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">size</span><span class="p">()</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">max_le</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">max_le</span><span class="p">,</span><span class="n">le</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">mp</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
        	<span class="c1">//获取子函数值</span>
            <span class="n">a</span><span class="o">=</span><span class="n">mp</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
        	<span class="n">b</span><span class="o">=</span><span class="n">mp1</span><span class="p">[</span><span class="n">a</span><span class="p">];</span>
        	<span class="c1">//产生越界直接返回</span>
            <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">){</span>
                <span class="n">NA</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
        	<span class="c1">//检查节点是否访问过，是则存在环路；直接返回</span>
            <span class="k">if</span><span class="p">(</span><span class="n">vis</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                    <span class="n">R</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
                    <span class="k">return</span> <span class="p">;</span>
            <span class="p">}</span>
        	<span class="c1">//将节点设置为访问过</span>
            <span class="n">vis</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        	<span class="c1">//再次深度遍历</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">vis</span><span class="p">,</span><span class="n">le</span><span class="o">+</span><span class="n">b</span><span class="p">);</span>
        	<span class="c1">//检查是否存在环路</span>
            <span class="k">if</span><span class="p">(</span><span class="n">R</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>
                <span class="k">return</span> <span class="p">;</span>
        	<span class="c1">//更改访问标志位</span>
            <span class="n">vis</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="c1">//访问数组</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vis</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="c1">//被调用函数个数</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
    <span class="c1">//记录函数调用关系</span>
    <span class="k">while</span><span class="p">(</span><span class="n">m</span><span class="o">&lt;</span><span class="n">n</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">//函数编号和栈空间大小</span>
        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="o">&gt;&gt;</span><span class="n">b</span><span class="p">;</span>
        <span class="n">mp1</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">=</span><span class="n">b</span><span class="p">;</span>
        <span class="c1">//将其调用函数，</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">v</span><span class="p">[</span><span class="n">m</span><span class="p">];</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">b</span><span class="p">;</span>
            <span class="n">mp</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">m</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">//对每个节点进行深度遍历</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">vis</span><span class="p">,</span><span class="n">mp1</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">R</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="c1">//如果产生环路。输出对应信息</span>
    <span class="k">if</span><span class="p">(</span><span class="n">R</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"R"</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span>
    <span class="p">{</span>   
        <span class="k">if</span><span class="p">(</span><span class="n">NA</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
        	<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"NA"</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">//输出最大值</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">max_le</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">system</span><span class="p">(</span><span class="s">"pause"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>
:ET