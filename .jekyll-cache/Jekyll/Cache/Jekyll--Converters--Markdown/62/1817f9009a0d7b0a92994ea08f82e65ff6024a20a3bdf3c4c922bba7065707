I"I	<h1 id="unix网络编程-学习笔记">UNIX网络编程 学习笔记</h1>
<p><em>参考链接：</em></p>

<ul>
  <li><a href="https://blog.csdn.net/zzxiaozhao/article/details/102637708">《Unix网络编程》卷1 初级</a></li>
  <li><a href="https://blog.csdn.net/zzxiaozhao/article/details/102662861">《Unix网络编程》卷1 中级</a></li>
  <li><a href="https://blog.csdn.net/zzxiaozhao/article/details/102771985">《Unix网络编程》卷1 高级</a></li>
  <li><a href="https://zevvez.github.io/2017/12/13/unp/#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AE%80%E4%BB%8B">《UNIX网络编程卷一》读书笔记</a></li>
</ul>

<blockquote>
  <p>2019-12-05 21:10:53</p>
</blockquote>

<h2 id="第-17-章-ioctl函数">第 17 章 ioctl函数</h2>

<p>这个是一个系统调用接口，主要是为文件写入和输出信息</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;unistd.h&gt;
</span><span class="cm">/* 若成功则为0，若出错就为-1 */</span>
<span class="kt">int</span> <span class="nf">ioctl</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span><span class="kt">int</span> <span class="n">request</span><span class="p">,...</span><span class="cm">/* void *arg */</span><span class="p">);</span>
</code></pre></div></div>
<p>和网络相关的请求总结如下:</p>

<p><img src="https://wangpengcheng.github.io/img/2019-12-06-16-29-30.png" alt="网络相关iotcl请求总结" /></p>

<h3 id="175-接口配置">17.5 接口配置</h3>

<p>调用iotcl之前先分配一个缓冲区和一个ifconf结构，然后初始化，后者。初始化结果和返回值如下：</p>

<p><img src="https://wangpengcheng.github.io/img/2019-12-06-16-33-28.png" alt="" /></p>

<p><img src="https://wangpengcheng.github.io/img/2019-12-06-16-33-58.png" alt="" /></p>

<h3 id="178-arp-高速缓存操作">17.8 ARP 高速缓存操作</h3>

<p>使用ioctl进行ARP的高速缓存操作。使用路由域的系统，往往改用路由套接字访问ARP高速缓存。可以使用get_ifi_info函数，获取本主机上所有的IP地址</p>

<h3 id="179-路由表操作">17.9 路由表操作</h3>

<p>使用ioctl SIOCADDRT向路由表中添加一个表项；
SIOCDELRT 从路由表中删除一个表项。</p>

<h3 id="第-18-章">第 18 章</h3>
:ET